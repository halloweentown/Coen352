#GLOBAL VARIABLES

iEvolution = 0		# Evolution index
nEvolutions = 2000	# Number of evolutions

# probabilities of each mutation occuring
m1p = 0.25	# Probability of conducting a swap mutation
m2p = 0.25	# Probability of conducting a delete mutation
m3p = 0.25	# Probability of conducting a modify mutation
m4p = 0.25	# Probability of conducting no mutation

'''# Input array selection'''

# Nearly Sorted
inputArray = [3,9,13,13,19,22,22,62,66,73,79,82,96,99,115,127,130,134,143,171,182,189,189,213,225,227,230,242,244,246,253,288,297,307,329,340,374,382,391,409,422,424,434,440,442,448,458,471,477,498,511,521,528,533,549,551,562,573,581,581,585,586,586,587,588,598,612,643,651,651,685,699,699,708,711,745,760,764,766,777,779,785,786,804,812,813,829,830,843,871,876,910,915,917,918,928,940,977,988,991]

# Nearly Inverted Sorted
#inputArray = [988,987,979,975,952,952,939,934,931,925,923,889,853,842,827,816,804,797,796,775,759,746,721,708,704,683,681,661,647,641,638,634,630,625,624,622,607,604,600,590,587,566,539,527,524,522,511,511,490,478,472,435,425,423,392,379,372,369,352,337,323,322,322,317,305,295,291,272,260,247,243,234,218,204,199,198,196,190,183,178,159,159,157,155,149,141,141,137,133,132,130,108,99,98,96,65,61,52,38,26]

# Rnd small range
#inputArray = [34.0,30.0,73.0,30.0,32.0,15.0,26.0,71.0,64.0,70.0,8.0,51.0,53.0,63.0,31.0,73.0,69.0,46.0,57.0,53.0,62.0,71.0,90.0,78.0,53.0,24.0,2.0,44.0,20.0,69.0,28.0,34.0,68.0,77.0,50.0,49.0,6.0,89.0,36.0,45.0,84.0,16.0,39.0,86.0,4.0,90.0,59.0,51.0,47.0,19.0,42.0,87.0,98.0,50.0,23.0,25.0,69.0,68.0,37.0,27.0,61.0,86.0,92.0,77.0,60.0,14.0,50.0,6.0,5.0,31.0,33.0,30.0,90.0,77.0,39.0,12.0,35.0,92.0,31.0,38.0,8.0,91.0,15.0,38.0,91.0,13.0,19.0,84.0,46.0,67.0,85.0,58.0,12.0,51.0,67.0,55.0,28.0,99.0,23.0,48.0]

# Rand large range
#inputArray = [3841.0,368.0,5920.0,2419.0,1941.0,9570.0,180.0,3604.0,8322.0,8972.0,1504.0,3845.0,9252.0,698.0,498.0,7241.0,2277.0,8765.0,7501.0,2425.0,3892.0,4016.0,9521.0,6083.0,6797.0,5542.0,7792.0,866.0,57.0,5539.0,3586.0,3603.0,3868.0,3216.0,6201.0,4256.0,1637.0,9377.0,748.0,220.0,9940.0,7575.0,5184.0,8639.0,6230.0,4865.0,6857.0,5105.0,6810.0,88.0,8815.0,2043.0,1302.0,7735.0,1160.0,7577.0,1755.0,7691.0,6996.0,6701.0,3113.0,2099.0,1035.0,204.0,737.0,3744.0,7943.0,5987.0,3276.0,7481.0,5394.0,2092.0,2927.0,9814.0,5444.0,4267.0,7207.0,1758.0,3930.0,4462.0,6299.0,2582.0,7482.0,4850.0,7191.0,6652.0,8332.0,4503.0,2301.0,979.0,7141.0,7781.0,610.0,7873.0,9256.0,5642.0,1388.0,7103.0,9850.0,7358.0]


# Input array sorted solution
#inputSortedArray = [3,9,13,13,19,22,22,62,66,73,79,82,96,99,115,127,130,134,143,171,182,189,189,213,225,227,230,242,244,246,253,288,297,307,329,340,374,382,391,409,422,424,434,440,442,448,458,471,477,498,511,521,528,533,549,551,562,573,581,581,585,586,586,587,588,598,612,643,651,651,685,699,699,708,711,745,760,764,766,777,779,785,786,804,812,813,829,830,843,871,876,910,915,917,918,928,940,977,988,991]

# Big O notation
n = len(inputArray)
# Initialized sort individual minimum length
minSortLength = n
# Maximum Sort length of any indivdual
power = int(3)
maxSortLength = n ** power

